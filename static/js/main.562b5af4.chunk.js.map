{"version":3,"sources":["components/FormContact/FormContact.js","components/Filter/Filter.js","components/ListContact/ContactListItem/ContactListItem.js","components/ListContact/ListContact.js","App.js","index.js"],"names":["FormContact","state","name","number","handleInputChange","e","setState","target","value","onAddContact","preventDefault","props","addContact","onSubmit","this","type","onChange","pattern","title","required","Component","Filter","onFilter","ContactListItem","contact","deleteContact","id","onClick","ListContact","contacts","map","App","useState","JSON","parse","window","localStorage","getItem","setContacts","filter","setFilter","useEffect","setItem","stringify","find","alert","newContact","shortid","generate","prevContacts","toLowerCase","includes","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gTAuDeA,E,4MAnDbC,MAAQ,CACNC,KAAM,GACNC,OAAQ,I,EAGVC,kBAAoB,SAACC,GACnB,EAAKC,SAAL,eAAiBD,EAAEE,OAAOL,KAAOG,EAAEE,OAAOC,S,EAG5CC,aAAe,SAACJ,GACdA,EAAEK,iBACF,EAAKC,MAAMC,WAAW,EAAKX,MAAMC,KAAM,EAAKD,MAAME,QAClD,EAAKG,SAAS,CAAEJ,KAAM,GAAIC,OAAQ,M,4CAEpC,WACE,OACE,uBAAMU,SAAUC,KAAKL,aAArB,UACE,yCAEE,uBACEM,KAAK,OACLb,KAAK,OACLM,MAAOM,KAAKb,MAAMC,KAClBc,SAAUF,KAAKV,kBACfa,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAGZ,2CAEE,uBACEJ,KAAK,MACLb,KAAK,SACLM,MAAOM,KAAKb,MAAME,OAClBa,SAAUF,KAAKV,kBACfa,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAGZ,wBAAQJ,KAAK,SAAb,gC,GA1CkBK,aCgBXC,EAhBA,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUd,EAAY,EAAZA,MAC1B,OACE,mCACE,0DAEE,uBAAOO,KAAK,OAAOb,KAAK,UAAUM,MAAOA,EAAOQ,SAAUM,UCcnDC,EAnBS,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,cAC1BC,EAAqBF,EAArBE,GAAIxB,EAAiBsB,EAAjBtB,KAAMC,EAAWqB,EAAXrB,OAClB,OACE,+BACGD,EADH,IACUC,EACR,wBAAQwB,QAAS,kBAAMF,EAAcC,IAArC,wBCqBSE,EAzBK,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUJ,EAAoB,EAApBA,cAC/B,OACE,6BACGI,EAASC,KAAI,SAACN,GAAD,OACZ,cAAC,EAAD,CACEA,QAASA,EAETC,cAAeA,GADVD,EAAQE,UCHR,SAASK,IACtB,MAAgCC,oBAAS,WAAO,IAAD,EAC7C,iBAAOC,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,oBAA9C,QAA8D,MADhE,mBAAOR,EAAP,KAAiBS,EAAjB,KAGA,EAA4BN,mBAAS,IAArC,mBAAOO,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACRN,OAAOC,aAAaM,QAAQ,WAAYT,KAAKU,UAAUd,MACtD,CAACA,IA8BJ,OACE,qCACE,2CACA,cAAC,EAAD,CAAajB,WA/BE,SAACV,EAAMC,GACxB,GAAI0B,EAASe,MAAK,SAACpB,GAAD,OAAaA,EAAQtB,OAASA,KAC9C2C,MAAM,GAAD,OAAI3C,EAAJ,iCADP,CAKA,IAAM4C,EAAa,CACjBpB,GAAIqB,IAAQC,WACZ9C,OACAC,UAGFmC,GAAY,SAACW,GAAD,OAAmBH,GAAnB,mBAAkCG,WAoB5C,0CACA,cAAC,EAAD,CAAQzC,MAAO+B,EAAQjB,SAnBV,SAAC,GAAgB,IAAdf,EAAa,EAAbA,OAClBiC,EAAUjC,EAAOC,UAmBf,cAAC,EAAD,CAAaqB,SAfRA,EAASU,QAAO,SAACf,GAAD,OACrBA,EAAQtB,KAAKgD,cAAcC,SAASZ,EAAOW,kBAcHzB,cAVtB,SAAC2B,GACrBd,EAAYT,EAASU,QAAO,SAACf,GAAD,OAAaA,EAAQE,KAAO0B,YCrC5DC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACxB,EAAD,MAEFyB,SAASC,eAAe,W","file":"static/js/main.562b5af4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass FormContact extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handleInputChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  onAddContact = (e) => {\n    e.preventDefault();\n    this.props.addContact(this.state.name, this.state.number);\n    this.setState({ name: \"\", number: \"\" });\n  };\n  render() {\n    return (\n      <form onSubmit={this.onAddContact}>\n        <label>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={this.state.name}\n            onChange={this.handleInputChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={this.state.number}\n            onChange={this.handleInputChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nFormContact.propTypes = {\n  addContact: PropTypes.func,\n};\n\nexport default FormContact;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Filter = ({ onFilter, value }) => {\n  return (\n    <>\n      <label>\n        Find contacts by name\n        <input type=\"text\" name=\"keyword\" value={value} onChange={onFilter} />\n      </label>\n    </>\n  );\n};\n\nFilter.propTypes = {\n  onFilter: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n\nexport default Filter;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst ContactListItem = ({ contact, deleteContact }) => {\n  const { id, name, number } = contact;\n  return (\n    <li>\n      {name} {number}\n      <button onClick={() => deleteContact(id)}>Delete</button>\n    </li>\n  );\n};\n\nContactListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    number: PropTypes.string,\n  }),\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ContactListItem from \"./ContactListItem/ContactListItem\";\n\nconst ListContact = ({ contacts, deleteContact }) => {\n  return (\n    <ul>\n      {contacts.map((contact) => (\n        <ContactListItem\n          contact={contact}\n          key={contact.id}\n          deleteContact={deleteContact}\n        />\n      ))}\n    </ul>\n  );\n};\n\nListContact.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ).isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ListContact;\n","//import React, { Component } from \"react\";\nimport React, { useState, useEffect } from \"react\";\nimport shortid from \"shortid\";\nimport FormContact from \"./components/FormContact/FormContact\";\nimport Filter from \"./components/Filter/Filter\";\nimport ListContact from \"./components/ListContact/ListContact\";\n\nexport default function App() {\n  const [contacts, setContacts] = useState(() => {\n    return JSON.parse(window.localStorage.getItem(\"contacts\")) ?? [];\n  });\n  const [filter, setFilter] = useState(\"\");\n\n  useEffect(() => {\n    window.localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  }, [contacts]);\n\n  const addContact = (name, number) => {\n    if (contacts.find((contact) => contact.name === name)) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n\n    const newContact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n\n    setContacts((prevContacts) => [newContact, ...prevContacts]);\n  };\n  const onFilter = ({ target }) => {\n    setFilter(target.value);\n  };\n\n  const filteredArray = () => {\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  const deleteContact = (contactId) => {\n    setContacts(contacts.filter((contact) => contact.id !== contactId));\n  };\n\n  return (\n    <>\n      <h2>Phonebook</h2>\n      <FormContact addContact={addContact} />\n      <h2>Contacts</h2>\n      <Filter value={filter} onFilter={onFilter} />\n      <ListContact contacts={filteredArray()} deleteContact={deleteContact} />\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}